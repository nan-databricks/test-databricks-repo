import asyncio
import aiohttp
from aiohttp import ClientError

async def fetch(session, url, timeout_sec=5):
    try:
        async with session.get(url, timeout=timeout_sec) as response:
            response.raise_for_status()
            data = await response.text()
            print(f"Fetched {len(data)} chars from {url}")
            return url, data[:100]  # Return the first 100 characters for brevity
    except ClientError as e:
        print(f"Client error fetching {url}: {e}")
        return url, None
    except asyncio.TimeoutError:
        print(f"Timeout error fetching {url}")
        return url, None

async def main():
    urls = [
        'https://www.example.com',
        'https://www.python.org',
        'https://httpbin.org/delay/3',  # Will deliberately delay
        'https://nonexistent.domain',   # Will raise exception
    ]
    async with aiohttp.ClientSession() as session:
        tasks = [asyncio.create_task(fetch(session, url, timeout_sec=2)) for url in urls]
        for coro in asyncio.as_completed(tasks):
            url, content = await coro
            if content:
                print(f"Processed content from {url}: {content[:60]!r}...")
            else:
                print(f"No content from {url}")

if __name__ == "__main__":
    asyncio.run(main())
